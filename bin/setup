#!/usr/bin/env ruby
require "fileutils"

APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args, exception: true)
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts "== Installing dependencies =="
  system("bundle check") || system!("bundle install")

  # Install JavaScript dependencies
  system("yarn install --check-files")

  # Optional: install Python microservice dependencies
  begin
    service_dir = File.join(APP_ROOT, "python", "password_service")
    venv_dir = File.join(service_dir, ".venv")
    req_file = File.join(service_dir, "requirements.txt")

    if File.exist?(req_file)
      puts "\n== Setting up Python virtualenv for password service =="
      unless File.exist?(File.join(venv_dir, "bin", "python"))
        system("python3 --version > /dev/null 2>&1") or raise "python3 not available"
        system!("python3", "-m", "venv", venv_dir)
      end
      system!(File.join(venv_dir, "bin", "python"), "-m", "pip", "install", "--upgrade", "pip")
      system!(File.join(venv_dir, "bin", "python"), "-m", "pip", "install", "-r", req_file)
      puts "Python microservice dependencies installed."
    end
  rescue => e
    warn "[setup] Skipping Python deps (#{e.message}). You can install later in #{service_dir}."
  end

  # puts "\n== Copying sample files =="
  # unless File.exist?("config/database.yml")
  #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
  # end

  puts "\n== Preparing database =="
  system! "bin/rails db:prepare"

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  unless ARGV.include?("--skip-server")
    puts "\n== Starting development server =="
    STDOUT.flush # flush the output before exec(2) so that it displays
    exec "bin/dev"
  end
end
